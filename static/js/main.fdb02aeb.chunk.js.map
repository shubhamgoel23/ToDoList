{"version":3,"sources":["ToDo.js","NewTodoForm.js","ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["ToDo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleUpdate","handleChange","handleToggle","evt","preventDefault","this","updateTodo","id","toggleTodo","setState","target","name","value","removeTodo","className","onSubmit","type","onChange","completed","onClick","class","Component","NewTodoForm","handleSubmit","createTodo","uuid","htmlFor","placeholder","ToDoList","todos","create","remove","update","toggleCompletion","newTodo","updatedTask","updateTodos","map","todo","filter","t","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdb02aeb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './ToDo.css'\r\nclass ToDo extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isEditing: false,\r\n            task: this.props.task\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleToggle = this.handleToggle.bind(this);\r\n    }\r\n\r\n    handleUpdate(evt){\r\n        evt.preventDefault();\r\n        this.props.updateTodo(this.props.id, this.state.task)\r\n        this.toggleForm()\r\n    }\r\n\r\n    handleToggle(evt){\r\n        this.props.toggleTodo(this.props.id);\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]:evt.target.value\r\n        })\r\n    }\r\n\r\n    toggleForm(){\r\n        this.setState({\r\n            isEditing: !this.state.isEditing\r\n        })\r\n    }\r\n\r\n    handleRemove(){\r\n        this.props.removeTodo(this.props.id);\r\n    }\r\n    render(){\r\n        let result;\r\n        if(this.state.isEditing){\r\n            result = (\r\n                <div className='Todo' >\r\n                    <form className='Todo-edit-form' onSubmit={this.handleUpdate} >\r\n                        <input \r\n                            type='text' \r\n                            value={this.state.task} \r\n                            name='task' \r\n                            onChange={this.handleChange} \r\n                        />\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        } else {\r\n            result = (\r\n                <div className='Todo' >\r\n                \r\n                <li className={this.props.completed? 'Todo-task completed':'Todo-task'} \r\n                    onClick={this.handleToggle}\r\n                >{this.props.task}\r\n                </li>\r\n                <div className='Todo-buttons'>\r\n                    <button onClick={this.toggleForm} ><i class=\"fas fa-pen\" /></button>\r\n                    <button onClick={this.handleRemove} ><i class=\"fas fa-trash\" /></button>\r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default ToDo","import React, { Component } from 'react'\r\nimport { v4 as uuid } from 'uuid';\r\nimport './NewTodoForm.css'\r\n\r\n\r\nclass NewTodoForm extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {task:\"\"};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.createTodo({...this.state, id:uuid(), completed: false});\r\n        this.setState({\r\n            task:\"\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n         return(\r\n             <form className='NewTodoForm' onSubmit ={this.handleSubmit} >\r\n                 <label htmlFor=\"task\" >New Todo</label>\r\n                 <input type=\"text\"\r\n                     placeholder=\"New Todo\" \r\n                     id=\"task\" \r\n                     name='task'\r\n                     value={this.state.task} \r\n                     onChange={this.handleChange}\r\n                 />\r\n                 <button>Add Todo</button>\r\n\r\n             </form>\r\n         )\r\n    }\r\n}\r\n\r\nexport default NewTodoForm","import React, { Component } from 'react'\r\nimport ToDo from './ToDo'\r\nimport NewTodoForm from './NewTodoForm'\r\nimport './ToDoList.css'\r\n\r\nclass ToDoList extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        };\r\n        this.create = this.create.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this);\r\n    }\r\n\r\n    create(newTodo){\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        });\r\n    }\r\n\r\n    update(id, updatedTask){\r\n        const updateTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                return {...todo, task: updatedTask}\r\n            }\r\n            return todo;\r\n        })\r\n\r\n        this.setState({\r\n            todos: updateTodos\r\n        })\r\n\r\n    }\r\n\r\n    toggleCompletion(id){\r\n        const updateTodos = this.state.todos.map(todo => {\r\n            if(todo.id === id){\r\n                return {...todo, completed: !todo.completed}\r\n            }\r\n            return todo;\r\n        })\r\n\r\n        this.setState({\r\n            todos: updateTodos\r\n        })\r\n    }\r\n\r\n    remove(id){\r\n        this.setState({\r\n            todos: this.state.todos.filter(t => t.id !==id)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const todos = this.state.todos.map(todo => {\r\n            return <ToDo \r\n                    key={todo.id} \r\n                    id={todo.id} \r\n                    task={todo.task} \r\n                    completed={todo.completed}\r\n                    removeTodo = {this.remove} \r\n                    updateTodo = {this.update}\r\n                    toggleTodo = {this.toggleCompletion}\r\n                    />\r\n        })\r\n        return (\r\n            <div className='ToDoList'>\r\n                <h1>Get To Work! <span>A Simple Todo List.</span></h1>\r\n                <ul>{todos}</ul>\r\n                <NewTodoForm createTodo={this.create} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDoList;","import ToDoList from './ToDoList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}